// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using admintickets.Context;

#nullable disable

namespace admintickets.Migrations
{
    [DbContext(typeof(BestTicketContext))]
    [Migration("20250315175631_SignalFinished")]
    partial class SignalFinished
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ticketlibrary.Models.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Reduction")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("DiscountCode");
                });

            modelBuilder.Entity("ticketlibrary.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.PriceBracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("InternalMinDuration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("PriceBracket");
                });

            modelBuilder.Entity("ticketlibrary.Models.SessionToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionToken");
                });

            modelBuilder.Entity("ticketlibrary.Models.Signal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Signal");
                });

            modelBuilder.Entity("ticketlibrary.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfUsesPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("ticketlibrary.Models.SubscriptionTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("InternalDuration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxNumberOfUsesPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("SubscriptionTier");
                });

            modelBuilder.Entity("ticketlibrary.Models.Taxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Taxe");
                });

            modelBuilder.Entity("ticketlibrary.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TicketPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("TicketPaymentId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ticketlibrary.Models.TicketPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CodeUsedId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CodeUsedReduction")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentAmountBeforeTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentAmountOfTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaymentAmountTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeUsedId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("TicketPayment");
                });

            modelBuilder.Entity("ticketlibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AccountDisableDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ticketlibrary.Models.Code", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany("Codes")
                        .HasForeignKey("HospitalId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.PriceBracket", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany("PriceBrackets")
                        .HasForeignKey("HospitalId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.SessionToken", b =>
                {
                    b.HasOne("ticketlibrary.Models.User", "User")
                        .WithMany("SessionTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ticketlibrary.Models.Signal", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany("Signals")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.Subscription", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.SubscriptionTier", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany("SubscriptionTiers")
                        .HasForeignKey("HospitalId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("ticketlibrary.Models.Ticket", b =>
                {
                    b.HasOne("ticketlibrary.Models.Hospital", "Hospital")
                        .WithMany("Tickets")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ticketlibrary.Models.TicketPayment", "TicketPayment")
                        .WithMany()
                        .HasForeignKey("TicketPaymentId");

                    b.Navigation("Hospital");

                    b.Navigation("TicketPayment");
                });

            modelBuilder.Entity("ticketlibrary.Models.TicketPayment", b =>
                {
                    b.HasOne("ticketlibrary.Models.Code", "CodeUsed")
                        .WithMany("TicketPayments")
                        .HasForeignKey("CodeUsedId");

                    b.HasOne("ticketlibrary.Models.Subscription", "Subscription")
                        .WithMany("TicketPayments")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("CodeUsed");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ticketlibrary.Models.Code", b =>
                {
                    b.Navigation("TicketPayments");
                });

            modelBuilder.Entity("ticketlibrary.Models.Hospital", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("PriceBrackets");

                    b.Navigation("Signals");

                    b.Navigation("SubscriptionTiers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ticketlibrary.Models.Subscription", b =>
                {
                    b.Navigation("TicketPayments");
                });

            modelBuilder.Entity("ticketlibrary.Models.User", b =>
                {
                    b.Navigation("SessionTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
